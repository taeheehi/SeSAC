
리액트

15. 네트워크 통신
16. Firebase

🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵



users 사용자에 관한 정보를 

몇개의 데이터가 있는지 



/1 => 1번 유저에게 접속 하겠습니다 .


url 을 변수로 따로 빼 놓았어요 


함수를 호출하면 된다 . 

괄호 안에 url 집어 넣으면 된다. 
그 결과를
.then이라는 함수로 받아주면 된다. 

그 결과를 json 으로 변환해주는 것 

data에 그 실제 결과가 다 들어 있겠죠 

그 객체가 담아 지겠죠 

비동기 : 일해! 나는 다른 일 하고 있을게! 
 + 기본적으로 fetch()와 useState()는 비동기형식으로 설정되어있다. 


🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵

백엔드가 없어도 백엔드를 만들어주는 
firebase


----------------------------
오늘 내일은 데이터 통신 
수 목 금 은 타입스크립트 



타입스크립트도 - 리액트 기반으로 공부

타입스크립을 리액트에 적용하는 방법쪽으로 공부할 거에요 




🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵
서버는
계속 대기를 해야함 
일좀 해 그 다음일 
왼쪽은 

해당되는 요청을 가져 올 때까지 아무것도 못하고 있어야 
요청에 대한 응답이 올 때 딱지 대기 


DB에서 
Fetch 에서 데이터 가져오는 준비를 하고 있는데 
클라이언트는 기다리지 않아요 
가지고 가! 명령만 해놓고 다음줄에 있는 코드를 실행하고 있는다.

완료된 그 시점에 

서버에게 


응답을 계속 기다려야함 

요청을 계속 해놓고 너도 일해 나도 일해 다했으면 결과 줘 

우선순위를 미뤄놓는 것

동기와 비동기 
🔵
fetch  -비동기 방식으로 일하고 있었고요 

useState
- 또한 비동기 방식으로 일하고 있었다 


setCount 



[todo, setTodo]  = useState(0)


useEffect


비동기 방식 (Asynchronous)

우리 함수 안에는 비동기 방식이 이뤄지고 있었다. 체감하고 있지는 못하였지만. 



동기방식 (synchronous)
요청을 보낸 후 


todo 에 새로운 값이 갱신 되는 게 setTodo

포트폴리오 


🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵

비동기 - 진동벨 


function 키워드 앞에 붙일 수 있는 


나 이거 비동기 처리 할거야~ 라고 컴퓨터에게 알려주는 거라고 보면 된다. 



await 짝궁  반드시 async 자식안에 들어 있어야 한다. 
코드블럭 중괄호 안에 있어야 한다. 

await 은 async키우


결과를 받을 때까지 계속 기다리고 있는 것 


await이 붙어있으면 계속 기다리는 것 
비동기는 - 일해 나도 딴일 하러갈게
await- 일해 나는 여기서 기다릴게 
결과주면 거기서 기다릴거야





🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵
fetch 


소괄호

주소에 해당하는 결과를 가져와서 담아주잖아요 ? 


undefined가 뜰 수 있어요 

항상 
패치를 부르면 패치의 결과를 받아서 user 에 저장을 할 건데 

그 데이터를 들어있는 보장이 없읍니다 왜냐하면 비동기 함수 

비동기의 특징 : 일해! 나도 그 다음일 할게 
ㄴ결과리턴을 기다리지 않고 지일 하러 가는것

fetch 라는 비동기 방식 앞에다가 

await 이라는 키워드를 붙여주면 ,


나 결과 주면 기다리고 있을 거 야 ... 

fetch 너가 리턴해서 결과를 user에 다 저장할 때 까지 기다릴 거임 ㅡㅡ  

🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵
인증관련 부분 / 데이터 베이스 관련 부분 

데이터 베이스의 언어 : SQL이라는 언어를 사용한다.
SQL을 배워야 MySQL 을 

오라클
마리아 dm

몽고db
no sql 

sql은 데이터베이스를 사용하깅 위한 새로운 언어들 
no sql sql사용하지 않는 데이터베이스 


nosql 기반의 firestore이다 .


기능이 좀 더 많고 

아마 firestro


 

🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵

키값이 노출되면 
타인이 내 데이터베이스에 건들 수 있기 떄문에(침투 할 수 있기 때문에 ) 
.env.local 파일에다가 따로 관리하도록 한다. 

따로 키를 분리하여서 깃허브에 올리면 자연스럽게 무시하게 된다 .  


키값이 
노출이 되면 내 키값을 가져다 쓸 수 있기 때문에 그걸 

그대로 깃허브 
다운로드 다운 

접속 할 수 있네 


침투 할 수 있기 때문에 키를 숨김 파일 
.env.local 



getDocs도 기본적으로 비동기함수

🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵🔵

