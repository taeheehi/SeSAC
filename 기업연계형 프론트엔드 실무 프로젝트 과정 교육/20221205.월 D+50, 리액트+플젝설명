useState가 리액트 엔진에게 요청을 한다 : 재랜더링 ( 리렌더링)


배열이 초기값으로 들어 있어요 
비어있는 문자열이 들어있어요 

const [names, setNames] = useState(['정수아', '리액트']);
names에 배열, ['정수아', '리액트'] 가 들어 있음.

const [input, setInput = useState(''); 
input에 빈값이 들어 있음.

배열을 가지고 map함수를 돌려봐라 
names.map((name, idx) => (<p key ={idx}>{name}</p>))}
하나씩 빼서 name이라는 것에 담으래 
p 태그로 
정수아, 리액트 나오게 됨 




인풋창 안에 있는, 실제 눈에 보이는 value 
uploadInput 




setNames([input])
input을 배열로 넣어서 setNames를 변경하세요



useState가 리액트 엔진에게 render()함수 자동 실행시켜줘 요청하게 되면
리액트 엔진이 render()해줌, (새로고침 시켜줌.)


useEffect
매개변수로 콜백함수 
ㄴ처음 랜더링 되었을 때만 데이터를 가져왔으면 좋겠어!

useEffect(() =>{콜백함수, 배열})
useEffect(()=>{//작업},[value])

🔵
useEffect()
매개변수1 : 콜백함수  - 필수사항 
매개변수2 : 배열   -    옵션
=======================
매개변수 1 : 콜백함수 
- 렌더링 될 때마다 콜백함수가 실행 
- 네트워크 통신 -> 데이터를 가져오기 
- 사용하는 의미가 없다.

🔵
매개변수1 : 콜백함수
매개변수2 : 배열 -> []
비어있는 배열이 있다.
 최초에 한 번만 작업을 수행한다.

🔵
매개변수1 : 콜백함수
매개변수2 : 배열 -> [변수이름]
-변수의 값이 


Useref 와 UseState의 차이점 
값의 렌더링의 차이점 
값이 변경이 되면 화면도 다시 그리는 것 : UseState
값이 변경이 되어도 화면갱신에는 상관이 없는 것 : UseRef 

UseRef 
일반 변수 
일반 변수는 렌더링이 되는 순간에 다시 초기값인 0으로 되어 버림 .

일반변수와 Ref 변수의 차이점



리액트에서 변수 만드는 방법 3가지 
usestate
useref 
일반 변수 


usesate : 값이 바뀌면 화면을 다시 그리는 것 
useref : 값이 아무리 바뀌어도 화면을 다시 랜더링 하지 않는 거 
일반 변수 : ???   화면이 렌더링 되는 순간에 화면이 로기값으로 바뀌는 것 . 


ㄴ 정확하지 않을 수 있음 다시 찾아서 정리하기 


useRef : 특정 DOM 요소에 접근 
DOM : HTML 태그에 





컴포넌트 내부에서 자주 값이 바뀌는 값이 있고, 화면 출력에는 영향을 미치지 않는 것에 UseRef 를 사용하면 성능에 좋아진다.

화면 렌더 하는 게 컴퓨터 입장에서 좋은 일은 아니다

빈배열 : 최초의 한 번만 실행

렌더링 : 페이지 새로고침 


----------------------------------------------------------------------------------------------------------------------

map 배열의 내장 함수 
값을 넣으면 사라지죠 
값을 넣은 값을 가진게 value 
value 가 value

이걸이제 버튼 이벤트로 가지고 와야 함 

~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~
컴포넌트의 상태를 관리할 떄 사용하는 HOOKS 

useReducer()




함수를 사용하는 이유 : 재사용 하기 위해서 

상태를 유지하는 함수를 따로 떼어놓는 것 

다른 컴포넌트가 필요한다고 하면 재사용이 가능해진다.


결과적으로 완전히 동일한 애들이에요.

useReducer()
useState()

컴포넌트 파일에서 어떤 로직을 분리할 수 있다. 


useState 사용

useReducer 사용 

둘의 결과는 똑같은데 
useReducer 
무엇을 사용할지는 개발자인 내가 하는 것이다.
내가 관리하는 값이 

useState() 
-컴포넌트에서 관리하는 
useReducer()
컴포넌트 내부에서 관리해야 하는 값이 별로 되지 않고 
값이 단순한 숫자, 문자열 , 불리언 등의 값인 경우 

useState()


복잡한 구조를 

컴포논ㅌ트 파일 내부에 복잡한 


눈으로 보기에 가독성이 굉장히 떨어지게 된다 .

useReducer
따로 함수로 빼놓던가 파일로 빼놓아서  - 불러오기 쉽게 



useReducer 나 useState나
 둘다 상태관리를 하는 HOOK이다.


---------------------------
주문을 하는 건 Dispatch 
Action 은 햄버거 주세요 

dispatch 안에 매개변수 action으로 주고 
"햄버거 주세요 " 라는 액션을 넣어주면 된다.


주문을 받아서 처리를 하는 주황색 공간 


처리한 결과는 다시 파란색 으로 돌려준다. 

주문 : dispath 란는 함수 
요청 액션을 action 

reducer 가 방법을 찾아서 결과를 만들어서 
결과를 리턴을 해준다 


const[state, dispatch] = useReducer(reducer, initialState);

[변수, 함수] = 초기값을 설정할 수 있는 useReducer(  ,2번째 매개변수 자리에 초기값을 설정한다.)

state컴퍼넌트 안에서 상태를 사용할 변수이다 
dispatch : 액션을 발생시키는 함수이다.

reducer : 발생한 처리를 해주는 함수 
initialState : state의 초기값


dispatch() 사용방법
dispatch({key : value })
매개변수로 객체를 전달해야한다. 
{key:value}
{키 땡떙 밸류 }

reducer 내가 직접 구현해야 하는 함수 

function reducer(state, action){
// 새로운 상태를 만드는 로직 
if문 , 조건문, 스위치문 ... 다양한 조건문들 

return 새로운 상태;  // 원하는 조건의 결과만을 return 할  수 있도록 
}


(첫번째 매개변수 : 현재의 상태
두번째 매개변수 : 객체값으로 , 업데이트할 정보가 있는 action 안에 객체 모양으로 
return : 새로운 상태의 결과값을 반환해주는 return
)

countReducer.js   ☞ 일반적으로 따로 파일로 빼 놓아야 별도의 파일로 작성을 해 놓는다 

function countReducer(state, action){
switch(action.type){    //type이라는 키를 가져와서 케이스 이름과 일치하면 그 결과를 가져와죠
case 'INCREMENT' :
return state + 1;
case 'DECREMENT' :
return state -1;
default :   //타입을 잘못가져온 것 같아~ 그냥 기존 값 가져가~
return state;

}

}
export default countReducer




컴포넌트가 아니기 때문에 
컴포넌트 = 화면에 보이는 무언가 내용물 
카운터 리두서는 단순히 연산을 해주는 것이기 때문에 

🔴
컴포넌트는 무조건 대문자로 파일명 만들어야 
하고 
함수는 화면출력과 전혀 상관 없기 때문에 countReducer



---
0이란 초기값은 state라는 변수에 저장되게 됨

주문은 dispatch라는 함수에서 하기로 함 

일반적으로 키 자리의 매개변수는 type 이라고 함

function numUp(){
dispatch({type})

🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴

프로젝트 설명중... 
도메인 관리, 성능분석... 뒤에 로직 다 돌려서... 
관리자 페이지 - 네트워크 속도나 다양한 분석 사이트 
🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴
🔵🔵<어제자 메모장 필기>


과목소개 

https://velog.io/@chlwnstjr94/HTML-CSS-Javascript%EC%97%90-%EB%93%A4%EC%96%B4%EA%B0%80%EA%B8%B0-%EC%A0%84


https://velog.io/@hound_woo/HTML-CSS-%EA%B8%B0%EC%B4%88-JavaScript-Calculator



자바스크립트 마인드맵
https://happycgi.tistory.com/1859

doit - 소스코드
https://github.com/Eun-Sook-Kim/doit_html_css_javascript


setState()
함수 동작 과정 

성능최적화 방법 - useState()함수의 인자로 콜백 함수를 넣어줌


useEffect() 
매개변수 자리에 값을 넣으면 된다.

특정시점에 딱1번만 실행했으면 좋겠어. 

useEffect(()=>{//작업},[value]);

useEffect(()=>{
console.log("렌더링이 완료되었습니다.");
console.log({names});
),


주로 메모리 정리할 때 clean up

리액트 변수 선언 방법 크게 3가지 
use
일반 변수 : 


Ref 실제 값은 바뀌지만, 화면에 렌더링은 안된다(재렌더링은 하지 않는다.)
useState 는 값이 변경이 되면, 화면 렌더링도 되지만. 
useRef는 값이 변경이 되도, 화면 갱신이 되지 않는다! 
var 라는 변수 버튼  : 

렌더링은 컴포넌트 첫번째 줄부터 다시 시작하는 것이 렌더링 
렌더링 될 때마다 0으로 초기화가 됨.

그래서 리액트에서는 일반 변수를 잘 사용하지 않기 때문이다.

어떤 변수에 값을 저장하는데 일반변수에 사용하면 계속 싹다 사라지기 때문이다 .


html 태그에 직접 접근이 가능한 useRef함수

current라는 
현재값, 초기값을 저장하기로 했음 

current라는 키에는 값이 없는 상태 


[] : 비어있는 배열 : 최초에 한번만 실행. 

html 태그, 돔이라는 객체에 연결하는 것 

연결하고 싶은 곳에 속성을 ref를 단다. 
객체의 이름만 넣어주면 된다 
ex.  ref={inputRef}
이 변수가 태그를 제어할 수 있게 된다. 

input태그에 focus를 걸어 주면 된다.

inputRef.current.focus()
inputRef 
현재연결되어있는 객체가 나옴
focus라는 함수를 연결을 해주면됨 

최초의 초기값을 주지 않고 객체값을 연결하고 싶은 ..// ref라는 객체값으로 넣고 태그 안에 작성해 주면 된다.



useEffect(()=>{
setRenderCount(renderCount+1);
console.log("렌더링 완료")
});
// 의존성 배열이 없기 떄문에, 렌더링 될 때 마다 useEffect()가 실행
//따라서 setRenderCount()는 계속 호출 됨


function sendBtnHandler(e){
setCurrentText(inputRef.current.value)
스테이트 함수 호출하면 
렌더링이 되는데
inputRef.current.value 값으로 화면이 업데이트 됨. 



const inputRef = useRef() ; //

function sendBtnHandler(e){
setCurrentText("안녕하세요"); //렌더링 -> inputRef.current.value
console.log("렌더링 완료");
}
🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴
컴포넌트의 상태를 관리할 떄 사용하는 HOOKS 

useReducer()




함수를 사용하는 이유 : 재사용 하기 위해서 

상태를 유지하는 함수를 따로 떼어놓는 것 

다른 컴포넌트가 필요한다고 하면 재사용이 가능해진다.


결과적으로 완전히 동일한 애들이에요.

useReducer()
useState()

컴포넌트 파일에서 어떤 로직을 분리할 수 있다. 


useState 사용

useReducer 사용 

둘의 결과는 똑같은데 
useReducer 
무엇을 사용할지는 개발자인 내가 하는 것이다.
내가 관리하는 값이 

useState() 
-컴포넌트에서 관리하는 
useReducer()
컴포넌트 내부에서 관리해야 하는 값이 별로 되지 않고 
값이 단순한 숫자, 문자열 , 불리언 등의 값인 경우 

useState()


복잡한 구조를 

컴포논ㅌ트 파일 내부에 복잡한 


눈으로 보기에 가독성이 굉장히 떨어지게 된다 .

useReducer
따로 함수로 빼놓던가 파일로 빼놓아서  - 불러오기 쉽게 



useReducer 나 useState나
 둘다 상태관리를 하는 HOOK이다.


---------------------------
주문을 하는 건 Dispatch 
Action 은 햄버거 주세요 

dispatch 안에 매개변수 action으로 주고 
"햄버거 주세요 " 라는 액션을 넣어주면 된다.


주문을 받아서 처리를 하는 주황색 공간 


처리한 결과는 다시 파란색 으로 돌려준다. 

주문 : dispath 란는 함수 
요청 액션을 action 

reducer 가 방법을 찾아서 결과를 만들어서 
결과를 리턴을 해준다 


const[state, dispatch] = useReducer(reducer, initialState);

[변수, 함수] = 초기값을 설정할 수 있는 useReducer(  ,2번째 매개변수 자리에 초기값을 설정한다.)

state컴퍼넌트 안에서 상태를 사용할 변수이다 
dispatch : 액션을 발생시키는 함수이다.

reducer : 발생한 처리를 해주는 함수 
initialState : state의 초기값


dispatch() 사용방법
dispatch({key : value })
매개변수로 객체를 전달해야한다. 
{key:value}
{키 땡떙 밸류 }

reducer 내가 직접 구현해야 하는 함수 

function reducer(state, action){
// 새로운 상태를 만드는 로직 
if문 , 조건문, 스위치문 ... 다양한 조건문들 

return 새로운 상태;  // 원하는 조건의 결과만을 return 할  수 있도록 
}


(첫번째 매개변수 : 현재의 상태
두번째 매개변수 : 객체값으로 , 업데이트할 정보가 있는 action 안에 객체 모양으로 
return : 새로운 상태의 결과값을 반환해주는 return
)

countReducer.js   ☞ 일반적으로 따로 파일로 빼 놓아야 별도의 파일로 작성을 해 놓는다 

function countReducer(state, action){
switch(action.type){    //type이라는 키를 가져와서 케이스 이름과 일치하면 그 결과를 가져와죠
case 'INCREMENT' :
return state + 1;
case 'DECREMENT' :
return state -1;
default :   //타입을 잘못가져온 것 같아~ 그냥 기존 값 가져가~
return state;

}

}
export default countReducer




컴포넌트가 아니기 때문에 
컴포넌트 = 화면에 보이는 무언가 내용물 
카운터 리두서는 단순히 연산을 해주는 것이기 때문에 

🔴
컴포넌트는 무조건 대문자로 파일명 만들어야 
하고 
함수는 화면출력과 전혀 상관 없기 때문에 countReducer



---
0이란 초기값은 state라는 변수에 저장되게 됨

주문은 dispatch라는 함수에서 하기로 함 

일반적으로 키 자리의 매개변수는 type 이라고 함

function numUp(){
dispatch({type})


🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴


함수 내부의 로직이 바뀌지 않았다면 
결과값을 그대로 재사용하면 어떨까 

결과를 만들 때까지는 1분이 걸리는데 

useMemo()는 왜 사용하는가?

function MyComponent({a,b}){
const result = compute(a,b);
return<div>{result}</div>

}
result라는 변수값을 화면에 출력해주세요 

compute라는 함수를 

값을 돌려주면 그값을 출력을 하는 거야 

결과를 리턴해주는데 시간이 많이 걸리기 때문에 


첫번째 매개변수 : 콜백함수   -> 연산량이 많은 작업을 수행 
두번째 매개변수 : 배열

const memoizedValue = useMemo(() => {
//연산량이 많은 작업을 수행
return compute(a ,b )
},[a,b]);


첫번째 매개변수
콜백함수 

두번째 매개변수 
의존성 배열 


●의존성 배열이 빈 배열인 경우 

컴포넌트가 마운트되었을 때만 콜백함수 호출
이후에는 항상 같은 값을 가져와서 사용

●의존성 배열이 없는 경우
useMemo(()=>{


})
컴포넌트가 렌더링 될 때마다 콜백함수 호출 



최초에 한번 실행이 되고 a와 b의 값이 바뀔 때 실행
function MyComponent({a,b}){
const result = compute(a,b);

return 

}

결과값을 메모 해 놓는 것이 useMemo

🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴🔴


숫자를 변경하는 순간에 렌더링이 된다. 


쉬운 계산기의 



렌더링 



쉬운 

어려운 계산기한테 너를 건드리지 않으면 실행되며 안되는 거야 라고 코드상으로 명시를 해줘야한다.

useMemo : 어떤 값을 메모를 해놓는 것 


그 값이 변하지 않았다면 함수 실행하지 못하도록 


콜백함수 : 누가 불러주면 hardCalculate 실행해주세요 

2번쨰 매개변수 배열이 들어 있어요 

hardNumber 

배열에 하드넘버라고 넣어놓는다면 1에서 2로 변하지 않는다면 hardCalculate 실행되지 않는다

값을 재사용하기 위해서 메모리 어딘가에 값을 저장해놓는게 useMemo


10001 
HardCalculate(hardNumber()

값을 저장하는 게 
useMemo  값을 저장
useCallback 함수를 저장

둘다 저장하는 건데 

함수의 호출부  = 값 

const hardSum = useMemo(()=> hardCalculate(hardNumber), [hardNumber] ) ;



useMemo사용시 주의점
성능최적화 = , 즉 메모리를 적게 쓰기 위해서 useMemo를 사용하고 있는데 
 ㄴ 값을 재사용하기 위해 별도의 메모리를 할당하여 값을 저장
=>불필요한 값까지 메모이제이션하면 메모리 용량이 늘어나서 
결론적으로 성능이 저하된다.

정말 오래걸리는 작업들만 메모를 해놓는 거야 


로직을 저장하는게 아니라 결과값을 저장하는 것이 useMemo이다...



🔵함수를 저장하는 useCallback   ,  (함수를 재사용하고 싶어서)

함수를 재사용할 것이냐  useCallback
값을 재사용할 것이냐 useMemo



첫번째 매개변수 = 콜백함수
두번째 매개변수 = 배열


렌더링이 발생할 때마다 함수가 새로 정의됨

const Mycomponent = () => {
function myFunction() {
console.log("함수 생성 완료")
}
}
<해석>
제2 매개변수인, [a,b]의 값이 변경이 될 때만 
제1 매개변수인 doSomething을 실행시켜주세요 
useCallBack()구조


자바스크립트의 함수 동등성???
리턴값이 "soo"라는 문자열을 가진 함수에요
const name1 = () => "soo";
자바스크립트에서의 함수는 내부적으로 객체모양으로 생겼다.


객체는 실제값을 저장하는 것이 아니라 주소를 저장하고 있다.


자바스크립트에서 함수는 객체이기 때문에 
똑같이 값을 가지고 있는 것 처럼 보이지만 
서로 다른 메모리

값을 저장하고 있는 주소가 다르기 떄문에 
삼항 연산자에서 다른 주소값을 비교하기 때문에 결과는 
'다르다' 가 나온다 


자바스크립트에서 함수는 객체로 이루어져 있다 .💞

주소값으로 비교 되기 때문에 








