오전 9:00 ~ 9:53 2022-12-07
[복습]

useReducer()
컴포넌트의 상태를 관리할 떄 사용하는 HOOKS

코드분리가 된다는 것은 - 코드 재사용이 얼마든지 가능하다는 것 

useState 

useReducer

파란색 - 컴포넌트 영역

컴포넌트 밖이나 , 별도의 파일로 만들어서 
다른컴포넌트들도 사용할 수 있도록 만든다. 

주문 - Dispatch 함수로 도와줌
메뉴는 - Action으로 구현

함수안에 매개변수로 Action을 넣도록 한다.

햄버거 가게에서는 
메뉴주문에 맞게 
Reducer - 주문에 대한 결과를 만들어주는 영역

햄버거에 대한 레시피대로 햄버거를 만들고 햄버거를 리턴 해주는 - State란 변수에 저장됨

---------------------------------------------------------------

Dispatch()
Action - 객체모양으로 생김

Reducer() 함수에 전달됨

그 결과를 State라는 변수에 결과값을 담아서 돌려준다. 

---------------------------------------------------------------

const[state, dispatch] = useReducer(reducer, initialState);

state - (결과돌려받는 것)결과값이 들어있는 영역
dispatch - (주문하는 것)변경해주는 함수 들어있는 영역

reducer - 햄버거 가게, 고객이 주문을 해야지 실행됨.
initialState - 초기값


dispatch 함수 호출   -   객체모양으로 전달을 해주기로 함 
dispatch({ key : value })

---------------------------------------------------------------

reducer()

선언부에, 매개변수2개 들어있어요.

function reducer(state, action){
//새로운 상태를 만드는 로직    -   if또는 switch 문을 사용한다.
return 새로운 상태;
}

action 에 객체모양으로

function countReducer(state, action){
switch(action.type){
case 'INCREMENT' : 
return state + 1;
case 'DECREMENT' : 
return state - 1;
default : 
return state;   //기존 것이라도 가지고 가 

}
}
export default countReducer;


(action.type)  -  객체모양으로 되어있기 때문에 (action)으로 작성하면 안되고 (action.type)이라고 작성해야 한다.

---------------------------------------------------------------

[컴포넌트 vs 일반함수]

컴포넌트 - 화면을 구현하는 return이라는 영역이 있다.
html 태그가 보이지 않는다 

파일명 : 꼭 대문자여야 하는 규칙

일반함수는 소문자여도 된다. 


---------------------------------------------------------------
dispatch()함수 :  객체값을 받는다.

결론적으로 동일한 일, 
기존의 State의 값을 변경해주는 일을 하는데, 

useState()

useReducer()


변수관리 useState로 해도되지만 
관리해야하는 값이 엄청나게 많고 길다면, 
useState()로 사용한다면 분리해서 관리하기가 힘들기 때문에 

useReducer()은 코드 분리가 가능해지고 👉 코드 재사용이 가능하다.

useState()

useReducer()

프로젝트가 커지면 커질 수록 useState로 관리하는 것은 무리가 있기 때문에 useReducer로 관리하는 것이 중요하다.

---------------------------------------------------------------
p.19
값을 메모리값에 저장하는 것이 memoization



프로그램 실행 속도를 빠르게 하는 장점이 있다.



useMemo()는 왜 사용하는가?

return - 화면에 그림을 그리는 영역


Component 
함수() {return 결과 값}
return <div>함수 결과 값</div>

렌더링 👉 Component 호출 👉 내부 변수 초기화

전달하려는 값에 변화가 없다면, 결과값도 변화가 없을 터이니 
굳이 다시 함수를 돌려서 계산을 하지말고, 메모를 해놓자! =>useMemo 

결과값을 저장하는 useMemo

useMemo()구조 
const memoizedValue = useMemo(
() => {
//연산량이 많은 작업을 수행
return compute(a,b) } , [ a, b ] ) ;


🔵의존성 배열이 빈 배열인 경우
마운트  = 첫화면이 나온 순간 
처음의나온 값만을 저장하는 것이, 빈 배열이다 []

🔵의존성 배열이 없는 경우
컴포넌트가 렌더링 될 떄마다 콜백함수 호출
useMemo()를 사용한느 의미가 없음.
ㄴ 하면 안되는 것.


첫 번째 매개변수
콜백함수
메모이제이션 할 값을 계산해서 반환해주는 함수 


🟡useMemo()를 적용하여 컴포넌트 수정
function MyComponent({a,b}) {
const result = useMemo(()=>compute(a,b), [a,b]);
return <div>{result}</div>
}

※ useMemo 사용시 주의점 
(목적)  값을 재사용하기 위해 별도의 메모

(When use?)
정말정말 계산하는 시간이 오래걸리고 자주 바뀌지 않는 애들 만 useMemo 로 메모리에 저장하는 것이 좋다.

사용할 일이 거의 없긴 하지만, 대용량을 사용할 때 좋다. 

---------------------------------------------------------------
2교시, 오전 10:08 2022-12-07

🔴useMemo vs useCallBack
함수모양 완전히 똑같고, 차이점은, 
useMemo = 값을 저장 
useCallBack = 함수를 통째로 저장할래? 

코드를 위에서부터 다시 시작하는 것이 렌더링

---------------------------------------------------------------

자바스크립트 함수 동등성

const UseCallBackComponent1 = () => {
const name1 = () => "soo";
const name2

console.log("

함수는 객체이기 때문에 
주소를 가지고 있고, 
그렇기 때문에 '다르다'가 출력된다.


---------------------------------------------------------------

setCount 가 불러진다는 것은 화면이 렌더링이 다시 일어난다.



useEffect(()=>{
console.log("렌더링 완료");
});

의존성 배열을 제거 한 함수를 추가 해보았다. 


렌더링이 됬는데, 이 함수가 변경되지 않았다면, 이 함수 다시 만들지 않아도 돼

숫자가 변경될 때 마다 
렌더링이 일어났고, 
이 함수는 그 모양 그대로 정의가 될 텐데 

변경이 될 때만, 콘솔로그를 찍을 게요 

변경이 없다면 콘솔로그는 찍히지 않을 게요 

setCount 되면 렌더링 발생되어 시작함  - const clickHandler함수를 다시 만들기 시작 


버튼클릭 안하기로 해서 클릭핸들러 실행 하지 않기로함 

변하지 않았다면 

만들어진 순간에 값이 아니라 
그 주소가 저장되게 됨 

2번째 렌더링 - 다시 함수를 만들러 갔더니 ,   새로누 주소를 써야지. 
2번째렌더링에서 만들어진 함수는 - 6번이라는 주소를 사용중입니다.

클릭핸들러가

자바스크립트에서 함수를 만들면, 함수가 가지고 있는 주소를 가리키고 있다. 
똑같은 함수를 만들고 있찌만,    새로운 주소 6번 주소에서 다시 만들게 된다 .


useEffect() 가 고장난게 아니라 

다르게 생겼으니 


Callback 함수가 

으아아아아앙아아 어려웡 아어ㅏ어ㅏㅓㅇ어ㅏ어ㅏ어ㅠㅠㅠㅠㅠㅠ


useCallback

함수를 통째로 메모리에 올리기 

const clickHandler = useCallback(()=>{
console.log("count : " , count)

)
의존성 배열의 해석                             
[] : 최초 렌더링 되었을 때 이 함수를 저장해 두세요 . 

콘솔에다가 현재 count 값만 찍는 것 


😕
[count]
카운트값이 바뀔 때만~~~~~~~~~🔴다시 공부 
의존성 배열에 대한 이해가 부족한 것 같다.
비교가 어떻게 진행되는지, 
달라지는 점을 어떻게 컴퓨터가 이해하고 있는지가 궁금
[count]  이렇게 배열 리터럴로만 저장했는데 비교가 되었는지가 궁금!

🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡

  전역적으로 컴포넌트를 

사용자의 언어를 
로그인 상태 등등 전역변수에 저장

일반적으로 '테마'를 많이 저장해 놓는다.

주의할점 
ㄴ Context와 컴포넌트가 연동되면 컴포넌트를 재사용하기 어렵다.

자주 변경되는 상태인 경우, 사용하지 않는 것이 좋다.
 ㄴ Context 내부의 값이 변경이 되면 Context를 사용하는 모든 자식 컴포넌트들이 리렌더링 된다.


Props Drilling 사용하면
단점, 유지보수가 어려워짐 

App.js 파일 하나에 모든 컴포넌트 들을 작성해서 


컴포넌트 하나 자체가 
이름으로 부르기만 불러와지는 것이 함수 이기 때문에 

파일명만 없을 뿐이지 

사용하는 

p.7
간단한 코드들은 하나의 파일에만 작성해도 된다는 말입니다~~~

function App() {
return <GrandParent value = "Hello World!" />;
}

function GrandParent({value}){
return <Parent value ={value} />;
}
function Parent({value}){
return <Child value = {value}/>;
}
function Child({value}){
return <Message value = {value} />;
}
function Message({value}){
return <div>전달받은 데이터 : {value}</div>;
}
export default 
보통 props 매개변수이름은 관습적으로 props 라고 작성하는 것이 좋은데 여기는 그냥 value 라고 작성해도 괜찮다. 

🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡

최대한 렌더링을 적게 하는 것이 좋다. 


useCallback

메모리에 저장해놔 

2번째 
저장되어 있는 값 그대로 가져다 씁니다.. 



🔴ChildComponent.js

import React, {memo} from "react";

const ChildComponent = (props) => {
const {update} = props ;

console.log ("child component 렌더링");

return <div></div>;

|;

export default memo(ChildComponent);



<반성>
너무 배열 리터럴에만 집중하고 있어서 
리액트 함수

크게크게 보아야 한다.




React.memo()는 컴포넌트 통째로 메모리에 저장시켜 버리는 것.


재 렌더링을 하지 않는다. 

   
🔵
React.memo()
(고차 컴포넌트) 
 - 리액트에서 제공하는 고차 컴포넌트
ㄴ 컴포넌트를 인자로 받아서 새로운 컴포넌트로 반환해줌
 - props의 변화가 있는지를 체크
ㄴ 변화가 있다면 렌더링 수행
ㄴ 변화가 없다면 기존에 렌더링 된 내용을 재사용


고차함수 : 매개변수를 콜백함수로 받는 함수 
고차 컴포넌트 : 매개변수를 컴포넌트로 받는 것 


일단은 개발이 우선이다... 


🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡🟡
cf 나중에 메이플 스토리랑 축구도 봐바야겠당 
메이플 스토리                               
포션👉 엘릭서

브라질 '공격수' 네이마르



















